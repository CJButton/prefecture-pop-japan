{"version":3,"sources":["logo.svg","requests.js","RenderCheckboxes.js","HighChartsOptions.js","ModalBase.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","HTTP_HEADER","Content-Type","Accept-Charset","X-API-KEY","fetchPrefecturePopulation","prefCode","cityCode","arguments","length","undefined","params","concat","url","request","method","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","endpoint","options","res","_args","wrap","_context","prev","next","fetch","headers","sent","abrupt","json","t0","console","error","stop","_x","apply","this","RenderCheckboxes","elementsArr","checkedObj","elementKey","callback","map","el","react_default","createElement","className","key","type","checked","onChange","chartOptions","credits","enabled","text","title","align","legend","layout","verticalAlign","yAxis","xAxis","series","Modal","openStatus","errorType","showHideClassName","errorData","initial","action","window","location","reload","buttonText","message","fetchPrefecture","onClick","App","_useState","useState","_useState2","slicedToArray","updateChart","_useState3","_useState4","isLoading","updateLoader","_useState5","_useState6","checkedPrefs","updateCheckedPrefs","_useState7","_useState8","prefArray","updatePrefArray","_useState9","_useState10","initialLoad","updateInitialLoad","_useState11","_useState12","modalOpen","updateModal","_useState13","_useState14","errorMessage","updateErrorMessage","_useState15","_useState16","updateTitle","chartRef","useRef","verifyIfPrefectureIsDisplayed","prefName","findIndex","name","removeFromChart","idx","updatedChartOptions","JSON","parse","stringify","splice","objectSpread","defineProperty","togglePrefecturePopulation","_ref2","prefStatus","additionalSeries","statusCode","Error","data","result","value","push","errorHandler","err","errorOrigin","useEffect","_ref3","_callee2","randPrefIDX","_res$result$randPrefI","randomPref","prefRes","prefNames","_title","initialChart","_context2","Math","floor","random","reduce","acc","pref","label","HighChartsOptions","categories","year","current","container","style","width","chart","reflow","initialFetch","ModalBase","src","logo","alt","Fragment","src_RenderCheckboxes","highcharts_react_min_default","highcharts","Highcharts","ref","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wSCElCC,EAAc,CAAEC,eAAgB,YAChBC,iBAAmB,QACnBC,YAJN,4CAkBHC,EAA4B,SAACC,GAA6B,IAAnBC,EAAmBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAR,IAEvDG,EAAM,YAAAC,OAAeL,EAAf,cAAAK,OAAoCN,GAC1CO,EAAM,wCAAwCD,OAAOD,GAC3D,OAAOG,EAAQD,EAAK,CAAEE,OAHP,SAMJD,EAAO,eAAAE,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAOC,GAAP,IAAAC,EAAAT,EAAAF,EAAAY,EAAAC,EAAAlB,UAAA,OAAAW,EAAAC,EAAAO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAiBN,EAAjBE,EAAAjB,OAAA,QAAAC,IAAAgB,EAAA,GAAAA,EAAA,GAA2B,GACxCX,EAAWS,EAAXT,OACFF,EAFe,GAAAD,OAnBL,sCAmBK,KAAAA,OAEOW,GAFPK,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAIDC,MAAMlB,EAAK,CAAEE,SAAQiB,QAAS/B,IAJ7B,cAIbwB,EAJaG,EAAAK,KAAAL,EAAAM,OAAA,SAKZT,EAAIU,QALQ,QAAAP,EAAAC,KAAA,GAAAD,EAAAQ,GAAAR,EAAA,SAQnBS,QAAQC,MAAM,iBARK,yBAAAV,EAAAW,SAAAjB,EAAA,kBAAH,gBAAAkB,GAAA,OAAAxB,EAAAyB,MAAAC,KAAAlC,YAAA,GCTLmC,EAdU,SAAA3B,GAAA,IAAG4B,EAAH5B,EAAG4B,YAAaC,EAAhB7B,EAAgB6B,WAAYC,EAA5B9B,EAA4B8B,WAAYC,EAAxC/B,EAAwC+B,SAAxC,OACvBH,EAAYI,IAAI,SAAAC,GAAE,OAChBC,EAAA9B,EAAA+B,cAAA,SACEC,UAAU,kBACVC,IAAG,YAAAzC,OAAcqC,EAAGH,KACpBI,EAAA9B,EAAA+B,cAAA,SACEG,KAAK,WACLC,QAASV,EAAWI,EAAGH,IACvBU,SAAU,kBAAMT,EAASE,MACvBA,EAAGH,OCKEW,EAhBM,CACnBC,QAAS,CACPC,SAAS,EACTC,KAAM,sCAENC,MAAO,CAAED,KAAM,GAAIE,MAAO,UAC5BC,OAAQ,CACNC,OAAQ,WACRF,MAAO,QACPG,cAAe,UAEjBC,MAAO,GACPC,MAAO,GACPC,OAAQ,ICqBKC,EAhCD,SAAArD,GAAyC,IAAtC+B,EAAsC/B,EAAtC+B,SAAUuB,EAA4BtD,EAA5BsD,WAAYC,EAAgBvD,EAAhBuD,UAC/BC,EAAoBF,EAAa,sBAAwB,qBAIzDG,EAAY,CAChBC,QAAW,CACTC,OAJc,kBAAQC,OAAOC,SAASC,UAKtCC,WAAY,uCACZC,QAAS,8FAEXC,gBAAmB,CACjBN,OAVe,kBAAQ5B,KAWvBgC,WAAY,qBACZC,QAAU,yLAId,OACE9B,EAAA9B,EAAA+B,cAAA,OAAKC,UAAWoB,GACdtB,EAAA9B,EAAA+B,cAAA,WAASC,UAAU,cACfqB,EAAUF,GAAWS,QACvB9B,EAAA9B,EAAA+B,cAAA,UACEC,UAAU,eACV8B,QAAUT,EAAUF,GAAWI,QAC7BF,EAAUF,GAAWQ,eCuHlBI,EApIH,WAAM,IAAAC,EACoBC,mBAAS,IAD7BC,EAAArE,OAAAsE,EAAA,EAAAtE,CAAAmE,EAAA,GACT3B,EADS6B,EAAA,GACKE,EADLF,EAAA,GAAAG,EAEkBJ,oBAAS,GAF3BK,EAAAzE,OAAAsE,EAAA,EAAAtE,CAAAwE,EAAA,GAETE,EAFSD,EAAA,GAEEE,EAFFF,EAAA,GAAAG,EAG2BR,mBAAS,IAHpCS,EAAA7E,OAAAsE,EAAA,EAAAtE,CAAA4E,EAAA,GAGTE,EAHSD,EAAA,GAGKE,EAHLF,EAAA,GAAAG,EAIqBZ,mBAAS,IAJ9Ba,EAAAjF,OAAAsE,EAAA,EAAAtE,CAAAgF,EAAA,GAITE,EAJSD,EAAA,GAIEE,EAJFF,EAAA,GAAAG,EAKyBhB,oBAAS,GALlCiB,EAAArF,OAAAsE,EAAA,EAAAtE,CAAAoF,EAAA,GAKTE,EALSD,EAAA,GAKIE,EALJF,EAAA,GAAAG,EAMiBpB,oBAAS,GAN1BqB,EAAAzF,OAAAsE,EAAA,EAAAtE,CAAAwF,EAAA,GAMTE,EANSD,EAAA,GAMEE,EANFF,EAAA,GAAAG,EAO2BxB,mBAAS,WAPpCyB,EAAA7F,OAAAsE,EAAA,EAAAtE,CAAA4F,EAAA,GAOTE,EAPSD,EAAA,GAOKE,EAPLF,EAAA,GAAAG,EAQa5B,mBAAS,IARtB6B,EAAAjG,OAAAsE,EAAA,EAAAtE,CAAAgG,EAAA,GAQTpD,EARSqD,EAAA,GAQFC,EARED,EAAA,GASVE,EAAWC,mBAEXC,EAAgC,SAACC,GACrC,OAAO9D,EAAaW,OAAOoD,UAAU,SAAAvE,GAAE,OAAIA,EAAGwE,OAASF,KAGnDG,EAAkB,SAACC,EAAKJ,GAC5B3B,GAAa,GACb,IAAMgC,EAAsBC,KAAKC,MAAMD,KAAKE,UAAUtE,IACtDmE,EAAoBxD,OAAO4D,OAAOL,EAAK,GAEvC3B,EAAmB/E,OAAAgH,EAAA,EAAAhH,CAAA,GAAK8E,EAAN9E,OAAAiH,EAAA,EAAAjH,CAAA,GAAqBsG,GAAW,KAClD/B,EAAYoC,GACZhC,GAAa,IAGTuC,EAA0B,eAAAC,EAAAnH,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAAN,GAAA,IAAAuG,EAAAjH,EAAA+H,EAAA5G,EAAA6G,EAAAV,EAAA,OAAAzG,EAAAC,EAAAO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAAQyF,EAARvG,EAAQuG,SAAUjH,EAAlBU,EAAkBV,SACnDsF,GAAa,MACPyC,EAAaf,EAA8BC,KAChC,GAHgB,CAAA3F,EAAAE,KAAA,eAAAF,EAAAM,OAAA,SAGNwF,EAAgBW,EAAYd,IAHtB,cAAA3F,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAMbzB,EAA0BC,GANb,YAMzBmB,EANyBG,EAAAK,MAOxBsG,WAPwB,CAAA3G,EAAAE,KAAA,eAON,IAAI0G,MAAM/G,GAPJ,QASzB6G,EAAmB,CACvBb,KAAMF,EACNkB,KAAMhH,EAAIiH,OAAOD,KAAK,GAAGA,KAAKzF,IAAI,SAAAC,GAAE,OAAIA,EAAG0F,UAEvCf,EAAsBC,KAAKC,MAAMD,KAAKE,UAAUtE,KAClCW,OAAOwE,KAAKN,GAEhC9C,EAAYoC,GACZ5B,EAAmB/E,OAAAgH,EAAA,EAAAhH,CAAA,GAAI8E,EAAL9E,OAAAiH,EAAA,EAAAjH,CAAA,GAAoBsG,GAAW,KACjD3B,GAAa,GAlBkBhE,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAQ,GAAAR,EAAA,SAqB/BiH,EAAYjH,EAAAQ,GAAM,mBArBa,yBAAAR,EAAAW,SAAAjB,EAAA,kBAAH,gBAAAkB,GAAA,OAAA4F,EAAA3F,MAAAC,KAAAlC,YAAA,GAyB1BqI,EAAe,SAACC,EAAKC,GACzB1G,QAAQC,MAAMwG,GACd9B,EAAmB+B,GACnBnC,GAAY,IA8CZ,OAtCFoC,oBAAU,YACU,eAAAC,EAAAhI,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAA6H,IAAA,IAAAzH,EAAA0H,EAAAC,EAAA9I,EAAA+I,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAtI,EAAAC,EAAAO,KAAA,SAAA+H,GAAA,cAAAA,EAAA7H,KAAA6H,EAAA5H,MAAA,cAAA4H,EAAA7H,KAAA,EAAA6H,EAAA5H,KAAA,EJ7DhBhB,EADK,qBACQ,CAAEC,OAFP,QI+DQ,YAEXU,EAFWiI,EAAAzH,MAGVsG,WAHU,CAAAmB,EAAA5H,KAAA,cAGQ,IAAI0G,MAAM/G,GAHlB,cAKX0H,EAAcQ,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMnI,EAAIiH,OAAOjI,SALpD2I,EAM0B3H,EAAIiH,OAAOS,GAA9C7I,EANS8I,EAMT9I,SAAoB+I,EANXD,EAMC7B,SANDmC,EAAA5H,KAAA,GAQKzB,EAA0BC,GAR/B,aAQXgJ,EARWI,EAAAzH,MASNsG,WATM,CAAAmB,EAAA5H,KAAA,eASY,IAAI0G,MAAMc,GATtB,QAWXC,EAAY9H,EAAIiH,OAAOoB,OAAO,SAACC,EAAKC,GAAN,OAAA/I,OAAAgH,EAAA,EAAAhH,CAAA,GAAqB8I,EAArB9I,OAAAiH,EAAA,EAAAjH,CAAA,GAA2B+I,EAAKzC,UAAW,KAAS,IACxFf,GAAkB,GAClBR,EAAmB/E,OAAAgH,EAAA,EAAAhH,CAAA,GAAKsI,EAANtI,OAAAiH,EAAA,EAAAjH,CAAA,GAAkBoI,GAAa,KACjDjD,EAAgB3E,EAAIiH,QAEd7E,EAAQyF,EAAQZ,OAAOD,KAAK,GAAGwB,MACrC9C,EAAYtD,IACN4F,EAAe5B,KAAKC,MAAMD,KAAKE,UAAUmC,KAClChG,MAAQ,CAAEL,MAAO,CAAED,KAAMC,IACtC4F,EAAatF,MAAQ,CAAEgG,WAAYb,EAAQZ,OAAOD,KAAK,GAAGA,KAAKzF,IAAI,SAAAC,GAAE,OAAIA,EAAGmH,QAC5EX,EAAarF,OAAOwE,KAClB,CAAEnB,KAAM4B,EACNZ,KAAMa,EAAQZ,OAAOD,KAAK,GAAGA,KAAKzF,IAAI,SAAAC,GAAE,OAAIA,EAAG0F,UACnDnD,EAAYiE,GAEMrC,EAASiD,QAAQC,UAAUD,QACnCE,MAAMC,MAAQ,OACxBpD,EAASiD,QAAQI,MAAMC,SA5BNhB,EAAA5H,KAAA,iBAAA4H,EAAA7H,KAAA,GAAA6H,EAAAtH,GAAAsH,EAAA,SA+BjBb,EAAYa,EAAAtH,GAAM,WA/BD,yBAAAsH,EAAAnH,SAAA2G,EAAA,kBAAH,yBAAAD,EAAAxG,MAAAC,KAAAlC,YAAA,EAkClBmK,IACC,IAGCzH,EAAA9B,EAAA+B,cAAA,OAAKC,UAAU,OACbF,EAAA9B,EAAA+B,cAACyH,EAAD,CACEtG,WAAYqC,EACZpC,UAAWwC,EACXhE,SAhDW,WACjB6D,GAAY,GACZhB,GAAa,IA+CPA,aAAcA,IAChB1C,EAAA9B,EAAA+B,cAAA,UAAQC,UAAU,eACfuC,GAAaY,IAAgBrD,EAAA9B,EAAA+B,cAAA,OAAK0H,IAAKC,IAAM1H,UAAU,WAAW2H,IAAI,SAEvExE,EAAc,KACbrD,EAAA9B,EAAA+B,cAACD,EAAA9B,EAAM4J,SAAP,KACGnH,EACFX,EAAA9B,EAAA+B,cAAA,OAAKC,UAAU,oBACbF,EAAA9B,EAAA+B,cAAC8H,EAAD,CACErI,YAAauD,EACbtD,WAAYkD,EACZhD,SAAUoF,EACVrF,WAAY,cAGhBI,EAAA9B,EAAA+B,cAAC+H,EAAA9J,EAAD,CACE+J,WAAYC,IACZ5J,QAASiC,EACT4H,IAAKjE,QC7HCkE,QACW,cAA7B1G,OAAOC,SAAS0G,UAEe,UAA7B3G,OAAOC,SAAS0G,UAEhB3G,OAAOC,SAAS0G,SAASC,MACvB,2DCZNC,IAASC,OAAOxI,EAAA9B,EAAA+B,cAACwI,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ebfe71a4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const API_KEY = 'xYEnhEhFcvudNNKwrmCqRKcJkRA4xN3LJiHdPJVw'\n\nconst HTTP_HEADER = { 'Content-Type': 'text/html',\n                      'Accept-Charset' : 'utf-8',\n                      'X-API-KEY' : API_KEY,\n                    };\nconst RESAS_URL = 'https://opendata.resas-portal.go.jp'\n\n/*\n  This fetches all prefectures in Japan, \n  upon initial loading of the app  \n*/\nexport const fetchPrefectures = () => {\n  const method = 'GET'\n  const url = 'api/v1/prefectures'\n  return request(url, { method })\n}\n\nexport const fetchPrefecturePopulation = (prefCode, cityCode = '-') => {\n  const method = 'GET'\n  const params = `?cityCode${cityCode}&prefCode=${prefCode}`\n  const url = `api/v1/population/composition/perYear`.concat(params)\n  return request(url, { method })\n}\n\nexport const request = async (endpoint, options = {}) => {\n  const { method } = options\n  const url = `${RESAS_URL}/${endpoint}`\n  try {\n    const res = await fetch(url, { method, headers: HTTP_HEADER })\n    return res.json()\n  }\n  catch(err) {\n    console.error('request error')\n  }\n}","import React from 'react';\n\nconst RenderCheckboxes = ({ elementsArr, checkedObj, elementKey, callback }) => (\n  elementsArr.map(el => (\n    <label \n      className='checkbox--label'\n      key={`checkbox-${el[elementKey]}`}>\n      <input\n        type=\"checkbox\"\n        checked={checkedObj[el[elementKey]]}\n        onChange={() => callback(el) } />\n        { el[elementKey] }\n    </label>\n  ))\n)\n\nexport default RenderCheckboxes","const chartOptions = {\n  credits: {\n    enabled: true,\n    text: 'Created by Christopher Button 2019'\n    },\n    title: { text: '', align: 'center', },\n  legend: {\n    layout: 'vertical',\n    align: 'right',\n    verticalAlign: 'middle'\n  },\n  yAxis: { },\n  xAxis: { },\n  series: [ ],\n}\n\nexport default chartOptions","import React from 'react';\n\nconst Modal = ({ callback, openStatus, errorType }) => {\n  const showHideClassName = openStatus ? \"modal display-block\" : \"modal display-none\";\n  const closeModal = () => ( callback() )\n  const reloadApp = () => ( window.location.reload() )\n\n  const errorData = {\n    'initial': { \n      action: reloadApp,\n      buttonText: 'もう一度試す',\n      message: 'アップロードできませんでした。'\n    },\n    'fetchPrefecture': {\n      action: closeModal,\n      buttonText: '閉じる',\n      message:  \"データを取得できませんでした。もう一度クリックしてください。\"\n    },\n  }\n\n  return (\n    <div className={showHideClassName}>\n      <section className=\"modal-main\">\n        { errorData[errorType].message }\n        <button \n          className='button-basic'\n          onClick={ errorData[errorType].action }>\n          { errorData[errorType].buttonText }\n        </button>\n      </section>\n    </div>\n  );\n};\n\nexport default Modal","import React, { \n      useState,\n      useRef, \n      useEffect } from 'react';\nimport './App.css';\nimport HighchartsReact from 'highcharts-react-official';\nimport Highcharts from 'highcharts';\nimport logo from './logo.svg';\nimport { fetchPrefectures,\n         fetchPrefecturePopulation } from './requests'\nimport RenderCheckboxes from './RenderCheckboxes'\nimport HighChartsOptions from './HighChartsOptions'\nimport ModalBase from './ModalBase'\n\nconst App = () => {\n  const [chartOptions, updateChart] = useState({})\n  const [isLoading, updateLoader] = useState(false)\n  const [checkedPrefs, updateCheckedPrefs] = useState({}) // { prefName: bool }\n  const [prefArray, updatePrefArray] = useState([])       // [ { prefName: str, prefCode: num } ]\n  const [initialLoad, updateInitialLoad] = useState(true)\n  const [modalOpen, updateModal] = useState(false)\n  const [errorMessage, updateErrorMessage] = useState('initial')\n  const [title, updateTitle] = useState('')\n  const chartRef = useRef();\n\n  const verifyIfPrefectureIsDisplayed = (prefName) => {\n    return chartOptions.series.findIndex(el => el.name === prefName)\n  }\n\n  const removeFromChart = (idx, prefName) => {\n    updateLoader(true)\n    const updatedChartOptions = JSON.parse(JSON.stringify(chartOptions))\n    updatedChartOptions.series.splice(idx, 1)\n\n    updateCheckedPrefs({ ...checkedPrefs, [prefName]: false })\n    updateChart(updatedChartOptions)\n    updateLoader(false)\n  }\n\n  const togglePrefecturePopulation = async ({prefName, prefCode}) => {\n    updateLoader(true)\n    const prefStatus = verifyIfPrefectureIsDisplayed(prefName)\n    if(prefStatus > -1) return removeFromChart(prefStatus, prefName)\n\n    try {\n      const res = await fetchPrefecturePopulation(prefCode)\n      if(res.statusCode) throw new Error(res)\n\n      const additionalSeries = {\n        name: prefName,\n        data: res.result.data[0].data.map(el => el.value) \n      }\n      const updatedChartOptions = JSON.parse(JSON.stringify(chartOptions))\n      updatedChartOptions.series.push(additionalSeries)\n\n      updateChart(updatedChartOptions)\n      updateCheckedPrefs({...checkedPrefs, [prefName]: true })\n      updateLoader(false)\n    }\n    catch(err) {\n      errorHandler(err, 'fetchPrefecture')\n    }\n  }\n\n  const errorHandler = (err, errorOrigin) => {\n    console.error(err)\n    updateErrorMessage(errorOrigin)\n    updateModal(true)\n  }\n\n  const closeModal = () => {\n    updateModal(false)\n    updateLoader(false)\n  }\n\n  useEffect(() => {\n    const initialFetch = async () => {\n      try {\n        const res = await fetchPrefectures()\n        if(res.statusCode) throw new Error(res)\n\n        const randPrefIDX = Math.floor(Math.random() * Math.floor(res.result.length))\n        const { prefCode, prefName: randomPref } = res.result[randPrefIDX]\n\n        const prefRes = await fetchPrefecturePopulation(prefCode)\n        if(prefRes.statusCode) throw new Error(prefRes)\n        \n        const prefNames = res.result.reduce((acc, pref) => ({ ...acc, [pref.prefName]: false}), {})\n        updateInitialLoad(false)\n        updateCheckedPrefs({ ...prefNames, [randomPref]: true })\n        updatePrefArray(res.result)\n\n        const title = prefRes.result.data[0].label\n        updateTitle(title)\n        const initialChart = JSON.parse(JSON.stringify(HighChartsOptions))\n        initialChart.yAxis = { title: { text: title }}\n        initialChart.xAxis = { categories: prefRes.result.data[0].data.map(el => el.year) }\n        initialChart.series.push(\n          { name: randomPref,\n            data: prefRes.result.data[0].data.map(el => el.value) } )\n        updateChart(initialChart)\n\n        const container = chartRef.current.container.current\n        container.style.width = \"100%\";\n        chartRef.current.chart.reflow();\n      }\n      catch(err) {\n        errorHandler(err, 'initial')\n      }\n    }\n    initialFetch()\n  }, [])\n\n    return(\n      <div className=\"App\">\n        <ModalBase \n          openStatus={modalOpen}\n          errorType={errorMessage}\n          callback={closeModal}\n          updateLoader={updateLoader} />\n        <header className=\"App-header\">\n        { (isLoading || initialLoad) && <img src={logo} className=\"App-logo\" alt=\"logo\" /> }\n\n        { initialLoad ? null :\n          (<React.Fragment>\n            { title }\n            <div className='checkbox-wrapper'>\n              <RenderCheckboxes\n                elementsArr={prefArray}\n                checkedObj={checkedPrefs}\n                callback={togglePrefecturePopulation}\n                elementKey={'prefName'}\n              />\n            </div>\n            <HighchartsReact\n              highcharts={Highcharts}\n              options={chartOptions}\n              ref={chartRef}\n            />\n          </React.Fragment>)\n        }\n        </header>\n      </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}